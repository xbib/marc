import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter

plugins {
    id "org.sonarqube" version "2.6.1"
    id "io.codearte.nexus-staging" version "0.11.0"
    id "org.xbib.gradle.plugin.asciidoctor" version "1.6.0.0"
}

printf "Date: %s\nHost: %s\nOS: %s %s %s\nJVM: %s %s %s %s\nGradle: %s Groovy: %s Java: %s\n" +
        "Build: group: ${project.group} name: ${project.name} version: ${project.version}\n",
        ZonedDateTime.now().format(DateTimeFormatter.ISO_DATE_TIME),
        InetAddress.getLocalHost(),
        System.getProperty("os.name"),
        System.getProperty("os.arch"),
        System.getProperty("os.version"),
        System.getProperty("java.version"),
        System.getProperty("java.vm.version"),
        System.getProperty("java.vm.vendor"),
        System.getProperty("java.vm.name"),
        gradle.gradleVersion, GroovySystem.getVersion(), JavaVersion.current()

apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: "io.codearte.nexus-staging"
apply plugin: 'org.xbib.gradle.plugin.asciidoctor'

repositories {
    mavenCentral()
}

configurations {
    wagon
}

dependencies {
    testCompile "org.junit.vintage:junit-vintage-engine:${project.property('junit-vintage.version')}"
    testCompile "org.xbib:bibliographic-character-sets:${project.property('xbib-bibliographic-character-sets.version')}"
    testCompile "org.xbib:content-core:${project.property('xbib-content.version')}"
    testCompile "xalan:xalan:${project.property('xalan.version')}"
    testCompile "org.xmlunit:xmlunit-matchers:${project.property('xmlunit-matchers.version')}"
    testCompile "com.github.stefanbirkner:system-rules:${project.property('system-rules.version')}"
    wagon "org.apache.maven.wagon:wagon-ssh:${project.property('wagon.version')}"
}

sourceCompatibility = JavaVersion.VERSION_1_9
targetCompatibility = JavaVersion.VERSION_1_8

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all" // << "-profile" << "compact2"
    if (JavaVersion.current().java9Compatible) {
        options.compilerArgs << '--release' << JavaVersion.toVersion(targetCompatibility).majorVersion
    }
}

test {
    // massive heap for for xmlunit DOM comparer
    jvmArgs '-Xmx2048m'
    testLogging {
        showStandardStreams = true
        exceptionFormat = 'full'
    }
}

asciidoctor {
    attributes toc: 'left',
            doctype: 'book',
            icons: 'font',
            encoding: 'utf-8',
            sectlink: true,
            sectanchors: true,
            linkattrs: true,
            imagesdir: 'img',
            'source-highlighter': 'coderay'
}

clean {
    delete 'out'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
}

artifacts {
    archives sourcesJar, javadocJar
}

if (project.hasProperty('signing.keyId')) {
    signing {
        sign configurations.archives
    }
}

apply from: 'gradle/ext.gradle'
apply from: 'gradle/publish.gradle'
apply from: 'gradle/sourcequality.gradle'
