plugins {
    id "org.sonarqube" version "2.6.1"
    id "io.codearte.nexus-staging" version "0.21.1"
    id "com.github.spotbugs" version "2.0.1"
    id "org.xbib.gradle.plugin.asciidoctor" version "1.6.0.1"
}

apply plugin: 'java-library'
apply plugin: 'maven'
apply plugin: 'pmd'
apply plugin: 'checkstyle'
apply plugin: "com.github.spotbugs"
apply plugin: "io.codearte.nexus-staging"
apply plugin: 'org.xbib.gradle.plugin.asciidoctor'

dependencies {
    testImplementation "org.junit.jupiter:junit-jupiter-api:${project.property('junit.version')}"
    testRuntimeOnly "org.junit.vintage:junit-vintage-engine:${project.property('junit.version')}"
    testImplementation "junit:junit:${project.property('junit4.version')}"
    testImplementation "org.xbib:bibliographic-character-sets:${project.property('xbib-bibliographic-character-sets.version')}"
    testImplementation "org.xbib:content-core:${project.property('xbib-content.version')}"
    testImplementation "xalan:xalan:${project.property('xalan.version')}"
    testImplementation "org.xmlunit:xmlunit-matchers:${project.property('xmlunit-matchers.version')}"
    testImplementation("com.github.stefanbirkner:system-rules:${project.property('system-rules.version')}") {
        exclude module: 'junit'
    }
}

compileJava {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

compileTestJava {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:all"
    if (!options.compilerArgs.contains("-processor")) {
        options.compilerArgs << '-proc:none'
    }
}

clean {
    delete 'out'
}

test {
    useJUnitPlatform()
    systemProperty 'java.util.logging.config.file', 
            project.file('src/test/resources/logging.properties').toString()
    failFast = false
    testLogging {
        showStandardStreams = true
        events 'STARTED', 'PASSED', 'FAILED', 'SKIPPED'
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
    // massive heap for for xmlunit DOM comparer
    jvmArgs '-Xmx2048m'
}

asciidoctor {
    attributes toc: 'left',
            doctype: 'book',
            icons: 'font',
            encoding: 'utf-8',
            sectlink: true,
            sectanchors: true,
            linkattrs: true,
            imagesdir: 'img',
            'source-highlighter': 'coderay'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier 'javadoc'
}

artifacts {
    archives sourcesJar, javadocJar
}

ext {
    user = 'xbib'
    projectName = 'marc'
    projectDescription = 'MARC bibliographic data processing library for Java'
    scmUrl = 'https://github.com/xbib/marc'
    scmConnection = 'scm:git:git://github.com/xbib/marc.git'
    scmDeveloperConnection = 'scm:git:git://github.com/xbib/marc.git'
}

spotbugs {
    effort = "max"
    reportLevel = "low"
}

tasks.withType(com.github.spotbugs.SpotBugsTask) {
    ignoreFailures = true
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

tasks.withType(Pmd) {
    ignoreFailures = true
    reports {
        xml.enabled = true
        html.enabled = true
    }
}
tasks.withType(Checkstyle) {
    ignoreFailures = true
    reports {
        xml.enabled = true
        html.enabled = true
    }
}

pmd {
    toolVersion = '6.11.0'
    ruleSets = ['category/java/bestpractices.xml']
}

checkstyle {
    configFile = rootProject.file('config/checkstyle/checkstyle.xml')
    ignoreFailures = true
    showViolations = true
}

sonarqube {
    properties {
        property "sonar.projectName", "${project.group} ${project.name}"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.tests", "src/test/java"
        property "sonar.scm.provider", "git"
        property "sonar.junit.reportsPath", "build/test-results/test/"
    }
}

task sonatypeUpload(type: Upload) {
    group = 'publish'
    configuration = configurations.archives
    uploadDescriptor = true
    repositories {
        if (project.hasProperty('ossrhUsername')) {
            mavenDeployer {
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
                repository(url: uri(ossrhReleaseUrl)) {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                snapshotRepository(url: uri(ossrhSnapshotUrl)) {
                    authentication(userName: ossrhUsername, password: ossrhPassword)
                }
                pom.project {
                    name projectName
                    description projectDescription
                    packaging 'jar'
                    inceptionYear '2016'
                    url scmUrl
                    organization {
                        name 'xbib'
                        url 'http://xbib.org'
                    }
                    developers {
                        developer {
                            id user
                            name 'JÃ¶rg Prante'
                            email 'joergprante@gmail.com'
                            url 'https://github.com/jprante'
                        }
                    }
                    scm {
                        url scmUrl
                        connection scmConnection
                        developerConnection scmDeveloperConnection
                    }
                    licenses {
                        license {
                            name 'The Apache License, Version 2.0'
                            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        }
                    }
                }
            }
        }
    }
}

nexusStaging {
    packageGroup = "org.xbib"
}

